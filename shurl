#!/bin/bash

# shurl-server: the server-side part of shurl

#
# shurl: a URL shortener
# 
# Unique in that it uses .htaccess as its only database, so has little
# to break or break into.
#
# http://lucasgonze.github.io/shurl/
# 

function gen_config {
	echo "Configuration file $CFG not found."
	echo

	# check that each of the param values actually works
	echo "You must be new here. Starting configuration..."

	echo
	echo "Base URL for your shortener: "
	echo "(For example http://example.com/)"
	read SHORTENER_BASE	
	echo "Testing $SHORTENER_BASE..."
	curl --silent $SHORTENER_BASE > /dev/null
	if [ $? != 0 ]
		then
		echo $SHORTENER_BASE is invalid
		exit 1
	fi

	# make sure it ends in /
	if [ `echo -n $SHORTENER_BASE | tail -c 1` != "/" ]
		then
		export SHORTENER_BASE=$SHORTENER_BASE"/"
	fi

	echo "Path to .htaccess on your web server?"
	read HTACCESS_PATH
	echo "testing $HTACCESS_PATH..."
	test -w "$HTACCESS_PATH"
	if [ $? != 0 ]
		then
		echo "$HTACCESS_PATH doesn't exist, isn't a file, or isn't writable."
		exit 1
	fi
	# fixme: if it doesn't exist, offer to create it

	echo "

# This is the configuration file for shurl. See
# http://https://github.com/lucasgonze/shurl

# The public URL at which your shortener will be hosted. Must end with a slash.
# The short slug for each long URL will be appended.
SHORTENER_BASE=$SHORTENER_BASE

# Path to .htaccess in your web server's file system. Your SSH
# account must have write permissions to it. It must have been
# initialized to hold 'RewriteEngine On'. This script will append
# to the .htaccess file. Obviously, this assumes Apache.
HTACCESS_PATH=$HTACCESS_PATH

" > $CFG

	echo
	echo "Your choices have been saved to $CFG"
}

function generate_random_slug {
	local chars="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	local chars_len=`echo -n $chars | wc -c`
	local slug
	for i in {1..5}
	do 
		rand_char_int=`expr $RANDOM % $chars_len`
		rand_char=`echo $chars | cut -c $rand_char_int`
		slug="$slug""$rand_char"
	done
	echo $slug	
}

function process_config {
	for param in SHORTENER_BASE HTACCESS_PATH
	do
		val=`grep "^$param=" $CFG | sed "s/$param=//" | head -1`
		if [ "$val" == "" ]
			then
			echo "Please set config param $param in $CFG"
			exit 1
		fi
		export $param=$val
	done
}

#########
# main
#########

if [ "$1" == "" -o "$1" == "-h" -o "$1" == "--help" ]; then
	echo "Usage: $0 [LONG URL TO SHORTEN]"
	exit 1
fi
URL_TO_SHORTEN="$1"

# security: since URL may contain third party content, it may inject an exploit
# into .htaccess. So escape it.
# fixme: do the escaping. See http://stackoverflow.com/questions/296536/urlencode-from-a-bash-script . 

# process config file
CFG=~/.shurl
if [[ -f $CFG ]]
	then
	process_config			
else
	gen_config
fi

# Note: we have two race conditions
#
# 1. If there is another process shortening this URL at the same time, it could 
# get added twice. The solution is to avoid double-adds, but be robust when they happen.
# 2. If another process generates the same slug for a different URL, ugh. Fu-ugh.
# 
# For 1 it is easier to be robust when it does happen than to prevent it. For 2
# need to brainstorm.

# has this URL been added yet? If so, return prior shortened URL. In case 
# of a double-add, that's fine - the second shortener will work too.
found=`grep "$URL_TO_SHORTEN" "$HTACCESS_PATH"`
if [ $? == 0 ]
	then
	# We found a saved URL for this item. Show it.
	# 14 is the char position after "RewriteRule ^". 18 is last char in saved stub.
	# head -1 is in case there are more than one previously saved versions
	saved=`echo "$found" | head -1 | cut -c 14-18`
	echo "$SHORTENER_BASE$saved"
	exit 0
fi

# find an unused tiny URL
SLUG=`generate_random_slug`
while [[ `grep $SLUG $HTACCESS_PATH` ]]; do
	SLUG=`generate_random_slug`
done
SHORTENED="$SHORTENER_BASE$SLUG"

# . append shortened URL to .htaccess:
found=`grep '$URL_TO_SHORTEN' '$HTACCESS_PATH'`
if [ $? == 0 ]
	then
	# We found a saved URL for this item. Show it.
	# 14 is the char position after "RewriteRule ^". 18 is last char in saved stub.
	# head -1 is in case there are more than one previously saved versions
	saved=`echo "$found" | head -1 | cut -c 14-18`
	echo "$SHORTENER_BASE$saved"
else
	# This URL hasn't yet been saved. Add it.
	rule="RewriteRule ^$SLUG\$ $URL_TO_SHORTEN [R,L]"
	echo '$rule' >> '$HTACCESS_PATH'

	if [[ $? == 0 ]]; then
		echo $SHORTENED
	else
		echo "Unable to append shortened URL to .htacce"
		exit 1
	fi

fi

# Copyright (c) 2014 Lucas Gonze <lucas@gonze.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


